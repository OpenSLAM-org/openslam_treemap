/*! \mainpage Treemap: Generic, Efficient and Incremental Least-Square SLAM
    \author Udo Frese

    \sa http://openslam.org/treemap.html    

    \section Abstract

 Treemap is an algorithm for feature based Gaussian
 SLAM. Actually it is an algorithm for incremental
 probabilistic inference in a high dimensional Gaussian
 defined as the product of many low dimensional Gaussians
 (incremental least square). Treemap can handle different
 variants of SLAM. Everything, that's specific to a SLAM
 variant or even to SLAM as a problem is contained in a small
 driver layer that can be adapted by the user.

    \section Description

          The main contribution of treemap is extremely efficient
          Gaussian inference. For instance, it can compute a
          full probabilistic update on a map with 1032271 2D features
          in 442ms. So, to put it in a nutshell: Treemap does the same
          job as Levenberg-Marquardt, only much faster.

	  The treemap algorithm as well as this implementation
	  consists of two layers. The treemap backend contains nearly
	  all the difficulties of the algorithm. It performs inference
	  in a high dimensional Gaussian defined as the product of
	  many low-dimensional Gaussians. The low-dimensional
	  Gaussians correspond to measurements. The second layer, the
	  treemap driver converts the original measurements into these
	  low dimensional Gaussians, basically by linearizing the
	  measurement equations and passes them to the treemap
	  backend. It also defines some application dependent
	  approximation policy. The backend then incrementally
	  computes the mean of the resulting Gaussian, which is in
	  turn converted by the treemap driver into a map estimate. We
	  have implemented drivers for 2D feature based SLAM, 2D/3DOF
	  pose relation based SLAM and 3D/6DOF feature based SLAM
	  without odometry.

          So, as a user, you have to provide a set of measurements as
          a vector of real numbers, i.e. you have to do your own
          feature detection on the raw sensor data. And you have to
          provide the identity of features to which the measurements
          refer (data-association). You also have to provide
          covariance (uncertainties) for these measurements. This is
          often a hand tuned parameter. If you are doing one of the
          above mentioned SLAM variants, that's it. Otherwise you also
          have to implement your own driver that linearizes
          measurement equations and defines an approximation policy
          for the back-end.

          Treemap provides a map estimate. It could in principle
          provide covariance information which would be useful for
          data-association. However, this is not implemented yet.

\section Requirements

	  The code is entirely written in C++. It has been checked to
          compile with GCC 4.1.2. CMake is needed as a build tool and
          LAPACK for numerical computation.

\section Map

	  The resulting map is a vector of feature positions (2D/3D
	  feature based SLAM) or robot poses (2D/3DOF pose relation
	  SLAM).

\section Input

	  The input to treemap are measurements with covariance and
	  known data-association. For 2D feature SLAM the input is the
	  observed 2D position of the feature relative to the robot, a
	  covariance (uncertainty) of that position and the id of the
	  feature observed. Additionally for every step of the robot
	  the 2D/3DOF pose of the robot after the step relative to the
	  pose before the step must be given with covariance. For 2D
	  pose relation based SLAM, a graph of 2D/3DOF poses is given,
	  where each node corresponds to the pose of the robot at some
	  point of time and an edge defines a measurement for one pose
	  relative to another pose obtained from scan-matching or
	  odometry. For 3D/6DOF SLAM the input is a 3D feature
	  position relative to the robot with the identity of the
	  feature. The current driver for 3D SLAM does not incorporate
	  inertial data or any form of odometry.

\section Classes
 
         The most important classes in this package are:

         \li \c TmSlamDriver2DL Treemap for classical 2D landmarks 
             and 3DOF poses. Use this class if you want to do SLAM
             on this kind of input.

         \li \c TmSlamDriver2DP Treemap for 2D/3DOF pose relation based
             SLAM. Use this class if you want to do SLAM
             on this kind of input.

         \li \c TmSlamDriver3D Treemap for 3D landmark and 6DOF poses.
             Use this class if you want to do SLAM
             on this kind of input. Warning: The driver does not support
             to supply any information on successive poses by means of
             odometry, inertial sensing or a motion model. Hence it is
             rather restricted.

         \li \c TmTreemap Treemap backend. Derive from this class if
             you want to implement your own driver. Take a look at the
             three existing drivers as examples.

\section Papers

          Treemap is a comparatively complicated algorithm. Although most
          of the complexity is hidden in the algorithm and this code
          is a fully revised second  implementation, it is necessary to
          have a thorough understand of what SLAM is and a rough undertanding
          on how treemap works to use this code. So please read the following
          papers:

          About SLAM in general:
          \sa H. Durrant-Whyte and T. Bailey, Simultaneous Localisation and Mapping (SLAM): Part I The Essential Algorithms.
              Robotics and Automation Magazine, June, 2006.

	  About the core treemap algorithm:
          \sa U. Frese, L. Schroeder, Closing a Million-Landmarks Loop,
              Proceedings of the IEEE/RSJ International Conference on 
              Intelligent Robots and Systems, Beijing, 2006

              http://www.informatik.uni-bremen.de/agbkb/publikationen/bibsearch/detail_e.htm?pk_int=1991


          About the multi-layered architecture with driver and backend:
          \sa U. Frese, Efficient 6-DOF SLAM with Treemap as a Generic Backend
              Proceedings of the Internation Conference on Robotics and Automation, Rome, 2007

              http://www.informatik.uni-bremen.de/agbkb/publikationen/bibsearch/detail_e.htm?pk_int=2263
          
          

\section Contact

      Udo Frese
      Universitaet Bremen
      udo.frese@dfki.de

\section LICENSE

Copyright (c) 2009, Universitaet Bremen
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of the Universitaet Bremen nor the names of its
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


 */
